// Generated by CoffeeScript 1.12.7
(function() {
  var ALINQ, async, defSel, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require('./util');

  async = require('async');

  defSel = function(item) {
    return item;
  };

  ALINQ = (function() {
    function ALINQ(items1) {
      this.items = items1;
      if (this.items == null) {
        throw 'ArgumentNullException';
      }
      if (!Array.isArray(this.items)) {
        throw 'InvalidCastException: Data not Array';
      }
      this.queue = [];
    }

    ALINQ.prototype.addTo = function(fn) {
      this.queue.push(fn);
      return this;
    };

    ALINQ.prototype.Execute = function(cb) {
      var fn;
      fn = function(memo, item, cb) {
        return item(memo, function(val) {
          return cb(null, val);
        });
      };
      return async.reduce(this.queue, this.items, fn, function(err, res) {
        return cb(res);
      });
    };

    ALINQ.prototype.Count = function(fn) {
      if (fn) {
        return this.Where(fn).Count();
      }
      return this.addTo(function(items, cb) {
        return cb(items.length);
      });
    };

    ALINQ.prototype.ElementAt = function(idx) {
      return this.addTo(function(items, cb) {
        return cb(items[idx]);
      });
    };

    ALINQ.prototype.ElementAtOrDefault = function(idx, d) {
      return this.addTo(function(items, cb) {
        return cb(items[idx] || d);
      });
    };

    ALINQ.prototype.Single = function(fn) {
      return this.First(fn);
    };

    ALINQ.prototype.SingleOrDefault = function(d, fn) {
      return this.FirstOrDefault(d, fn);
    };

    ALINQ.prototype.First = function(fn) {
      if (fn) {
        return this.Where(fn).First();
      }
      return this.ElementAt(0);
    };

    ALINQ.prototype.FirstOrDefault = function(d, fn) {
      return this.addTo(function(items, cb) {
        return cb(items[0] || d);
      });
    };

    ALINQ.prototype.Last = function(fn) {
      if (fn) {
        return this.Where(fn).Last();
      }
      return this.addTo(function(items, cb) {
        return cb(items[items.length - 1]);
      });
    };

    ALINQ.prototype.LastOrDefault = function(d, fn) {
      return this.addTo(function(items, cb) {
        return cb(items[items.length - 1] || d);
      });
    };

    ALINQ.prototype.DefaultIfEmpty = function(d) {
      return this.addTo(function(items, cb) {
        return cb(items.length === 0 ? d : items);
      });
    };

    ALINQ.prototype.Where = function(fn) {
      return this.addTo(function(items, cb) {
        return async.filter(items, fn, cb);
      });
    };

    ALINQ.prototype.Distinct = function() {
      var temp;
      temp = [];
      return this.Where(function(item, cb) {
        if (indexOf.call(temp, item) >= 0) {
          return cb(false);
        } else {
          temp.push(item);
          return cb(true);
        }
      });
    };

    ALINQ.prototype.Except = function(arr, fn) {
      if (fn == null) {
        fn = defSel;
      }
      return this.Where(function(item, cb) {
        var ref;
        return cb(!(ref = fn(item), indexOf.call(arr, ref) >= 0));
      });
    };

    ALINQ.prototype.OfType = function(type) {
      return this.Where(function(item, cb) {
        return cb(typeof item === type);
      });
    };

    ALINQ.prototype.Map = function(fn) {
      return this.addTo(function(items, cb) {
        var wrap;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, res);
          });
        };
        return async.map(items, wrap, function(err, res) {
          return cb(res);
        });
      });
    };

    ALINQ.prototype.Cast = function(type) {
      return this.Map(function(item, cb) {
        return cb((util.isFunction(type) ? type(item) : new type(item)));
      });
    };

    ALINQ.prototype.Select = function(fn) {
      return this.Map(fn);
    };

    ALINQ.prototype.SelectMany = function(fn) {
      return this.addTo(function(items, cb) {
        var wrap;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, res);
          });
        };
        return async.concat(items, wrap, function(err, res) {
          return cb(res);
        });
      });
    };

    ALINQ.prototype.Max = function() {
      return this.addTo(function(items, cb) {
        return cb(Math.max.apply(Math, items));
      });
    };

    ALINQ.prototype.Min = function() {
      return this.addTo(function(items, cb) {
        return cb(Math.min.apply(Math, items));
      });
    };

    ALINQ.prototype.Average = function(fn) {
      return this.addTo(function(items, cb) {
        var sum, wrap;
        if (fn == null) {
          fn = function(num, cb) {
            return cb(num);
          };
        }
        sum = 0;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, sum += res);
          });
        };
        return async.map(items, wrap, function() {
          return cb(sum / items.length);
        });
      });
    };

    ALINQ.prototype.Sum = function(fn) {
      return this.addTo(function(items, cb) {
        var sum, wrap;
        if (fn == null) {
          fn = function(num, cb) {
            return cb(num);
          };
        }
        sum = 0;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, sum += res);
          });
        };
        return async.map(items, wrap, function() {
          return cb(sum);
        });
      });
    };

    ALINQ.prototype.Reverse = function() {
      return this.addTo(function(items, cb) {
        return cb(items.reverse());
      });
    };

    ALINQ.prototype.OrderBy = function(fn) {
      return this.addTo(function(items, cb) {
        var wrap;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, res);
          });
        };
        return async.sortBy(items, wrap, function(err, res) {
          return cb(res);
        });
      });
    };

    ALINQ.prototype.OrderByDescending = function(fn) {
      return this.addTo(function(items, cb) {
        var wrap;
        wrap = function(item, cb) {
          return fn(item, function(res) {
            return cb(null, res);
          });
        };
        return async.sortBy(items, wrap, function(err, res) {
          return cb(res.reverse());
        });
      });
    };

    ALINQ.prototype.Contains = function(val, fn) {
      return this.addTo(function(items, cb) {
        return cb(indexOf.call(items, val) >= 0);
      });
    };

    ALINQ.prototype.Any = function(fn) {
      return this.addTo(function(items, cb) {
        return async.some(items, fn, cb);
      });
    };

    ALINQ.prototype.All = function(fn) {
      return this.addTo(function(items, cb) {
        return async.every(items, fn, cb);
      });
    };

    ALINQ.prototype.Concat = function(arr) {
      return this.addTo(function(items, cb) {
        return cb(items.concat(arr.items || arr));
      });
    };

    ALINQ.prototype.Intersect = function(arr, fn) {
      return this.addTo(function(items, cb) {
        var check, out;
        if (fn == null) {
          fn = function(item, item2) {
            return item === item2;
          };
        }
        arr = arr.items || arr;
        out = [];
        check = function(item, cb) {
          var check2;
          check2 = function(item2, cb) {
            if (fn(item, item2) === true) {
              out.push(item);
            }
            return cb();
          };
          return async.map(arr, check2, cb);
        };
        return async.map(items, check, function() {
          return cb(out);
        });
      });
    };

    return ALINQ;

  })();

  module.exports = ALINQ;

}).call(this);
