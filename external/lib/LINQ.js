// Generated by CoffeeScript 1.12.7
(function() {
  var LINQ, defSel, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  util = require('./util');

  defSel = function(item) {
    return item;
  };

  LINQ = (function() {
    function LINQ(items) {
      this.items = items;
      if (this.items == null) {
        throw 'ArgumentNullException';
      }
      if (!Array.isArray(this.items)) {
        throw 'InvalidCastException: Data not Array';
      }
    }

    LINQ.prototype.ToArray = function() {
      return this.items;
    };

    LINQ.prototype.GetTemporary = function() {
      var i, item, len, ref, results;
      ref = this.items;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(item);
      }
      return results;
    };

    LINQ.prototype.Count = function(fn) {
      return (fn ? this.Where(fn) : this).items.length;
    };

    LINQ.prototype.ElementAt = function(idx) {
      return this.items[idx];
    };

    LINQ.prototype.ElementAtOrDefault = function(idx, d) {
      return this.ElementAt(idx) || d;
    };

    LINQ.prototype.Single = function(fn) {
      if (fn) {
        return this.Where(fn).Single();
      }
      if (this.Count() > 1) {
        throw 'More than one element';
      }
      return this.ElementAt(0);
    };

    LINQ.prototype.SingleOrDefault = function(d, fn) {
      return this.Single(fn) || d;
    };

    LINQ.prototype.First = function(fn) {
      if (fn) {
        return this.Where(fn).First();
      }
      return this.ElementAt(0);
    };

    LINQ.prototype.FirstOrDefault = function(d, fn) {
      return this.First(fn) || d;
    };

    LINQ.prototype.Last = function(fn) {
      if (fn) {
        return this.Where(fn).Last();
      }
      return this.ElementAt(this.items.length - 1);
    };

    LINQ.prototype.LastOrDefault = function(d, fn) {
      return this.Last(fn) || d;
    };

    LINQ.prototype.DefaultIfEmpty = function(d) {
      if (this.items.length === 0) {
        return d;
      } else {
        return this;
      }
    };

    LINQ.prototype.Where = function(fn) {
      var idx, item;
      return new LINQ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          item = ref[idx];
          if (fn(item) === true) {
            results.push(item);
          }
        }
        return results;
      }).call(this));
    };

    LINQ.prototype.Distinct = function() {
      var item;
      return new LINQ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (!(indexOf.call(_results, item) >= 0)) {
            results.push(item);
          }
        }
        return results;
      }).call(this));
    };

    LINQ.prototype.Except = function(arr, fn) {
      if (fn == null) {
        fn = defSel;
      }
      return this.Where(function(item) {
        var ref;
        return !(ref = fn(item), indexOf.call(arr, ref) >= 0);
      });
    };

    LINQ.prototype.OfType = function(type) {
      return this.Where(function(item) {
        return typeof item === type;
      });
    };

    LINQ.prototype.Cast = function(type) {
      var item;
      return new LINQ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(util.isFunction(type) ? type(item) : new type(item));
        }
        return results;
      }).call(this));
    };

    LINQ.prototype.Map = function(fn) {
      var item;
      return new LINQ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(fn(item));
        }
        return results;
      }).call(this));
    };

    LINQ.prototype.Select = function(fn) {
      var item;
      return new LINQ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(fn(item));
        }
        return results;
      }).call(this));
    };

    LINQ.prototype.SelectMany = function(fn) {
      var i, item, len, ref, temp;
      temp = [];
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        temp = temp.concat(fn(item));
      }
      return new LINQ(temp);
    };

    LINQ.prototype.Max = function() {
      return Math.max.apply(Math, this.items);
    };

    LINQ.prototype.Min = function() {
      return Math.min.apply(Math, this.items);
    };

    LINQ.prototype.Average = function(fn) {
      return this.Sum(fn) / this.Count();
    };

    LINQ.prototype.Sum = function(fn) {
      var i, item, len, ref, sum;
      sum = 0;
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        sum += (fn ? fn(item) : item);
      }
      return sum;
    };

    LINQ.prototype.Reverse = function() {
      return new LINQ(this.GetTemporary().reverse());
    };

    LINQ.prototype.OrderBy = function(fn) {
      return new LINQ(this.GetTemporary().sort(function(a, b) {
        var x, y;
        x = fn(a);
        y = fn(b);
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      }));
    };

    LINQ.prototype.OrderByDescending = function(fn) {
      return new LINQ(this.GetTemporary().sort(function(a, b) {
        var x, y;
        x = fn(b);
        y = fn(a);
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      }));
    };

    LINQ.prototype.GroupBy = function(fn) {
      var out;
      out = {};
      this.items.forEach(function(val, idx) {
        var name;
        return (out[name = fn(val, idx)] != null ? out[name] : out[name] = []).push(val);
      });
      return out;
    };

    LINQ.prototype.Contains = function(val) {
      return indexOf.call(this.items, val) >= 0;
    };

    LINQ.prototype.ContainsAll = function(arr) {
      return new LINQ(arr).All((function(_this) {
        return function(item) {
          return indexOf.call(_this.items, item) >= 0;
        };
      })(this));
    };

    LINQ.prototype.Any = function(fn) {
      var i, idx, item, len, ref;
      ref = this.items;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        item = ref[idx];
        if (fn(item) === true) {
          return true;
        }
      }
      return false;
    };

    LINQ.prototype.All = function(fn) {
      var i, idx, item, len, ref;
      ref = this.items;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        item = ref[idx];
        if (fn(item) === false) {
          return false;
        }
      }
      return true;
    };

    LINQ.prototype.Concat = function(arr) {
      return new LINQ(this.items.concat(arr.items || arr));
    };

    LINQ.prototype.Intersect = function(arr, fn) {
      var i, idx, idx2, item, item2, j, len, len1, out, ref;
      if (fn == null) {
        fn = function(item, idx, item2, idx2) {
          return item === item2;
        };
      }
      arr = arr.items || arr;
      out = [];
      ref = this.items;
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        item = ref[idx];
        for (idx2 = j = 0, len1 = arr.length; j < len1; idx2 = ++j) {
          item2 = arr[idx2];
          if (fn(item, idx, item2, idx2) === true) {
            out.push(item);
          }
        }
      }
      return new LINQ(out);
    };

    return LINQ;

  })();

  module.exports = LINQ;

}).call(this);
